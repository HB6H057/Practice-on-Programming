常量对象、常量成员函数和常引用

常量对象
	如果不希望某个对象的值被改变，则定义该对象的时候可以在前面加const关键字。

常量对象
	如果不希望某个对象的值被改变，则定义该对象的时候可以在前面加const关键字。

常量成员函数
	在类的成员函数说明后面可以加const关键字，则该成员函数成为常量成员函数。
	
	常量成员函数执行期间不应修改其所作用的对象。因此，在常量成员函数中不能修改成员变量的值（静态成员变量除外），也不能调用同类的非常量成员函数(静态成员函数除外）。

常量成员函数的重载
	两个成员函数，名字和参数表都一样，但是一个是const,一个不是，算重载。

class Sample {
public:
	static int dat;
	int value;
	void GetValue() const; //常量成员函数
	void GetValue() {} // 成员函数重载
	void func(){}  //普通成员函数
	Sample(){}
};

void Sample::GetValue() const
{
//	value = 0; //错
//	func = 0; //错
//	dat = 1; //对吗？？？？？，静态成员变量不属于该对象
}

int main(void)
{
	const Sample s1; //静态对象
//	s1.value = 1; //错，静态对象不能更改其成员变量
//	s1.func(); //错，因为普通成员函数有可能修改对象
	s1.GetValue(); //对，因为静态成员函数不能修改该对象成员变量
	/*执行的是void GetValue() const;而不是void GetValue(); */
	return 0;
}

常引用
	对象作为函数的参数时，生成该参数需要调用复制构造函数，效率比较低。用指针作参数，代码又不好看，如何解决？	
	可以用对象的引用作为参数，但又有一定风险，如果形参被改，实参也会被改，怎么办？
	可以用对象的常引用：
class Sample{
	.....
};

void Print(const Sample & o){
	.....
}
